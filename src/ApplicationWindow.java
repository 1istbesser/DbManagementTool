/**
* Tamerincode ~ This database tool is an application that
* provides you with a dynamic way of adding, deleting and updating
* records in a MySQL database.
* @author  Tamer Altintop
* @version 1.1
* @since 25/05/2017
* * Web: www.tamerinblog.com
* GitHub: github.com/1istbesser
*/

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 * The Class mainWindow.
 */

public class ApplicationWindow implements TableModelListener {
	private DatabaseOperations dbOps = new DatabaseOperations();
	/**  JFrame objects<br><br> <b>frame</b>. */
	private JFrame frame;

	/**JPanel objects<br><br>
	 * The declaration of the panels.<br>
	 * <ol>
	 * <li><b>panel</b> - The main panel.</li>
	 * <li><b>panelLeft</b> - The sub-panel of panel taking up the left area.</li>
	 * <li><b>panelRight</b> - The sub-panel ofpanel taking up the right area.</li>
	 * </ol>*/
	private JPanel panel, panelLeft, panelRight;

	/**JButton objects<br><br> 
	 * The declaration of the buttons.<br>
	 * <ol>
	 * <li><b>btnOpen</b> - The button used to open the selected table.</li>
	 * <li><b>btnAdd</b> - The button used to add new records.</li>
	 * <li><b>btnDelete</b> - The button used to delete a record.</li>
	 * <li><b>btnExit</b> - The button used to exit the application.</li>
	 * </ol> */
	private JButton btnOpen, btnAdd, btnDelete, btnExit;

	/**  JTable objects<br><br> <b>table</b> - JTable object. */
	private JTable table;

	/** String objects<br><br> 
	 * The declaration of the strings containing the value of database connection parameters.<br>
	 * <ol>
	 * <li><b>username</b> - The string containing the username information.</li>
	 * <li><b>passwor</b> - The string containing the password information.</li>
	 * <li><b>database</b> - The string containing the database information.</li>
	 * <li><b>host</b> - The string containing the host information.</li>
	 * <li><b>selectedTable</b> - The string containing the selected table from the tables list.</li>
	 * </ol> */
	private String username = null, password = null, database = null, host = null, selectedTable = null;

	/** DefaultTableModel objects<br><br> 
	 * <b>tableModel</b> - implements the TableModel that uses a Vector of Vectors to store the cell value objects. */
	private final DefaultTableModel tableModel = new DefaultTableModel();



	/** ResultSet objects<br><br> 
	 * <b>rs</b> - representing a database result set, which is usually generated by executing a statement that queries the database. */
	private ResultSet rs;

	/** DefaultListModel objects<br><br> 
	 * <b>tablesNamesModel</b> - A list model for the names of the database tables. */
	private final DefaultListModel<String> tablesNamesModel = new DefaultListModel<String>();

	/** JList objects <br><br>
	 * <b>listOfTablesNames</b> - A list built upon the <b>tablesNamesModel</b> containing all the tables names. */
	private final JList<String> listOfTablesNames = new JList<String>(tablesNamesModel);

	/** JScrollPane objects<br><br>
	 * <b>tablesListScrollPane</b> - Used to make the list of tables extendable if needed.<br>
	 * <b>scrollTable</b> - Used to make the main table scrollable if needed. */
	private JScrollPane tablesListScrollPane, scrollTable;

	/** JMenuBar objects<br><br> 
	 * <b>menuBar</b> - An implementation of a menu bar. Contains JMenu objects. */
	private JMenuBar menuBar;

	/** JMenu objects<br><br>
	 * <b>appMenu</b> - The menu tab for options regarding the application itself.<br>
	 *  <b>desginMenu</b> - The menu tab for options regarding the appearance of the application.*/
	private JMenu appMenu, designMenu;

	/** JMenuItem objects<br><br>
	 * <ol>
	 * <li><b>disconnect</b> - Used to return to the login window.</li>
	 * <li><b>panelBackground</b> - Used to change the color of the panel's background.</li>
	 * <li><b>panelForeground</b> - Used to change the color of the panel's foreground.</li>
	 * <li><b>panelSelectedBackground</b> - Used to change the color of the panel selected item's background.</li>
	 * <li><b>panelSelectedForeground</b> - Used to change the color of the panel selected item's foreground.</li>
	 * <li><b>tableSelectedBackground</b> - Used to change the color of the table selected item's background.</li>
	 * <li><b>tableSelectedForeground</b> - Used to change the color of the table selected item's foreground.</li>
	 * <li><b>designReset</b> - Used to reset the design to the default state.</li>
	 * </ol>*/
	private JMenuItem disconnect, appDetails, panelBackground, panelForeground, panelSelectedBackground, panelSelectedForeground, tableSelectedBackground, tableSelectedForeground, designReset;

	/**  JLabel objects<br><br> <b>listHeader</b>. */
	private JLabel listHeader;

	/**  Custom color objects<br><br> <b>someBlue</b> - with the rgb(72, 121, 150)<br> <b>someBlue2</b> - with the rgb(12, 16, 56)<br> <b>someGreen</b> - with the rgb(79, 249, 108). */
	private Color someBlue = new Color(72, 121, 150), someBlue2 = new Color(12, 16, 56), someGreen = new Color(79, 249, 108);
	
	private NewRow newRow;
	/**
	 * Instantiates a new main window.<br>
	 * <b>List of contained methods</b>
	 * <ol>
	 * <li>{@link #setConnection}</li>
	 * <li>{@link #setFrame}</li>
	 * <li>{@link #addButtons}</li>
	 * <li>{@link #setTablesList}</li>
	 * <li>{@link #createPanel}</li>
	 * </ol>
	 * @param conUsername the username parameter.
	 * @param conPassword the password parameter.
	 * @param conHost the host parameter.
	 * @param conDatabase the database parameter.
	 * 
	 */
	public ApplicationWindow(String conUsername, String conPassword, String conHost, String conDatabase){
		dbOps.setCredentials(conUsername, conPassword, conHost, conDatabase);
		setCredentials(conUsername, conPassword, conHost, conDatabase);
		setFrame();
		addButtons();
		createMenu();
		setTablesList();
		createPanel();
		newRow = new NewRow();
		frame.add(panel);
		frame.setVisible(true);
	}
	/**
	 * Setting up the credentials for other methods to use.
	 * @param conUsername
	 * @param conPassword
	 * @param conHost
	 * @param conDatabase
	 */
	private void setCredentials(String conUsername, String conPassword, String conHost, String conDatabase){
		host=conHost;
		database=conDatabase;
		username=conUsername;
		password=conPassword;
	}
	/**
	 * This method is used to call the dbOperations to connect to the db if the connection was dropped due to being idle.
	 */
	private void reconnect(){
		dbOps.closeConnection();
		dbOps.createConnection();
	}

	/**
	 * Creates the frame and sets up properties like the size and the title.
	 */
	private void setFrame() {
		//Creating the frame
		frame = new JFrame();
		
		//Setting properties
		frame.setTitle("Tamerincode ~ A database tool V1.1");
		frame.setSize(800, 600);
		frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	
	}

	/**
	 * Checks if the connection is still up. If the connection is dropped a pop-up message is displayed asking whether to reconnect or not.<br>
	 *
	 * @return true, if the connection is up.<br>
	 * false, if the connection was dropped.
	 */
	private boolean checkConnection(){
			if(!dbOps.checkConnection()){
				int n = JOptionPane.showConfirmDialog(frame,"The connection was closed, reconnect?","Database security measure",
						JOptionPane.YES_NO_OPTION);
				//If the answer is yes, try to reconnect.
				if(n == JOptionPane.YES_OPTION){
					reconnect();
					
				//If the answer is no, dispose the frame and return to LoginWindow.
				} else if ( n == JOptionPane.NO_OPTION){
					frame.dispose();
					new LoginWindow();
				}
			}
			return true;
		}

	/**
	 * Sets up the list of tables and it populates it with the real tables from the database..
	 */
	private void setTablesList(){
	tablesListScrollPane = new JScrollPane(listOfTablesNames); 
	tablesListScrollPane.setBorder(null);
	listOfTablesNames.setBackground(someBlue);
	listOfTablesNames.setForeground(Color.white);
	listOfTablesNames.setSelectionBackground(someBlue2);
	listOfTablesNames.setSelectionForeground(Color.white);
	// atrs = all tables resultset
	ResultSet atrs = null;
	atrs = dbOps.getAllTables();
	if(atrs==null){
		JOptionPane.showMessageDialog(frame, "Could not get the tables names!\n");
		frame.dispose();
		new LoginWindow();
	} else {
		try{
			while (atrs.next()) {
				String tableName = atrs.getString(3);
				tablesNamesModel.addElement(tableName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			//Code 432 - atrs has no next or it couldn't use getString(3).
			JOptionPane.showMessageDialog(frame, "There is a SQLException error! Code 432.\n");
			frame.dispose();
			new LoginWindow();
		}  finally{
			try {
				atrs.close();
				dbOps.closeResultSet();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
		listOfTablesNames.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		listOfTablesNames.setSelectedIndex(0);
		listOfTablesNames.setVisibleRowCount(4);
		listOfTablesNames.setBorder(new EmptyBorder(3, 3, 3, 3));
	}

	/**
	 * Instantiates the buttons and adds the listeners for them.<br><br>
	 * <b>btnOpen</b> - The "Open table" button opens the selected table.<br>
	 * <b>btnAdd</b> - The "Add record" button adds a new empty record.<br>
	 * <b>btnDelete</b> - The "Delete record" button deletes a record.<br>
	 * <b>btnExit</b> - The "Exit" button is used to exit the application.
	 */
	private void addButtons(){
		//Instantisation of the buttons
		btnOpen = new JButton("Open table");
		btnAdd = new JButton("Add record");
		btnDelete = new JButton("Delete record");
		btnExit = new JButton("Exit");
		
		//Adding listeners
		ActionListener exitButton = new listenExitButton();
		ActionListener addButton = new listenAddButton();
		ActionListener removeButton = new listenRemoveButton();
		ActionListener openButton = new listenOpenButton();
		MouseListener dblClick = new dblClick();
		
		listOfTablesNames.addMouseListener(dblClick);
		btnOpen.addActionListener(openButton);
		btnExit.addActionListener(exitButton);
		btnAdd.addActionListener(addButton);
		btnDelete.addActionListener(removeButton);
	}
	
	/**
	 * Creates the menu.
	 */
	private void createMenu(){
		//Instantiating the menu objects
		menuBar = new JMenuBar();
		appMenu = new JMenu("Application");
		designMenu = new JMenu("Appearance");
		disconnect = new JMenuItem("Disconnect from the database");
		appDetails = new JMenuItem("Application details");
		panelBackground = new JMenuItem("Panel background");
		panelForeground = new JMenuItem("Panel foreground");
		tableSelectedBackground = new JMenuItem("Table selected row background");
		tableSelectedForeground = new JMenuItem("Table selected row foreground");
		panelSelectedBackground = new JMenuItem("Panel selected item background");
		panelSelectedForeground = new JMenuItem("Panel selected item foreground");
		designReset = new JMenuItem("Reset to default");
		
		//Add the menu tabs to the menu bar
		menuBar.add(appMenu);
		menuBar.add(designMenu);
		
		//Add items to the menus
		appMenu.add(disconnect);
		appMenu.add(appDetails);
		designMenu.add(panelBackground);
		designMenu.add(panelForeground);
		designMenu.add(panelSelectedBackground);
		designMenu.add(panelSelectedForeground);
		designMenu.add(tableSelectedBackground);
		designMenu.add(tableSelectedForeground);
		designMenu.add(designReset);
		
		//Add listeners for each item
		disconnect.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				frame.setVisible(false);
				new LoginWindow();
			}
		});
		appDetails.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JOptionPane.showMessageDialog(frame, "<html>Created by Tamer Altintop.<br/>Version V1.0.1<br/>Future versions available on www.tamerinblog.com/tamerincode/dbTool</html>");
			}
		});
		panelBackground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				panelLeft.setBackground(c);
				listOfTablesNames.setBackground(c);
				listHeader.setBackground(c);
			}
		});

		panelForeground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				panelLeft.setForeground(c);
				listOfTablesNames.setForeground(c);
				listHeader.setForeground(c);
			}
		});

		tableSelectedBackground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				table.setSelectionBackground(c);
			}
		});
		
		panelSelectedBackground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				listOfTablesNames.setSelectionBackground(c);
			}
		});
		
		tableSelectedForeground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				table.setSelectionForeground(c);
			}
		});
		
		panelSelectedForeground.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				Color c = JColorChooser.showDialog(null, "Choose a Color", Color.blue);
				listOfTablesNames.setSelectionForeground(c);
			}
		});
		
		designReset.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				panelLeft.setForeground(Color.white);
				listOfTablesNames.setForeground(Color.white);
				listHeader.setForeground(Color.white);
				panelLeft.setBackground(someBlue);
				listOfTablesNames.setBackground(someBlue);
				listHeader.setBackground(someBlue);
				listOfTablesNames.setSelectionForeground(Color.white);
				listOfTablesNames.setSelectionBackground(someBlue2);
				table.setSelectionBackground(someGreen);
				table.setSelectionForeground(Color.black);
			}
		});
	}
	
	/**
	 * Creates the panels, the list of headers, sets up the default selected table and the initial data for the selected table into the table model.
	 */
	private void createPanel(){
		// Main panel
		panel = new JPanel(new BorderLayout());
		// Left side
		panelLeft = new JPanel(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		// Right side
		panelRight = new JPanel(new GridBagLayout());
		GridBagConstraints v = new GridBagConstraints();
		// Setting the ID column uneditable.
		table = new JTable(tableModel){
			private static final long serialVersionUID = -7251800887624374231L;
			@Override
			public boolean isCellEditable(int row, int column) {
				return column == 0 ? false : true;
			}};

		table.setSelectionBackground(someGreen);
		scrollTable = new JScrollPane();
		scrollTable.setViewportView(table);
		panel.add(menuBar, BorderLayout.NORTH);
		

		panel.add(panelRight, BorderLayout.EAST);
		v.gridy=0;
		v.gridx=0;
		v.weighty=0;
		v.weightx=0;
		v.fill=GridBagConstraints.HORIZONTAL;
		panelRight.add(btnAdd, v);
		v.gridy=1;
		v.gridx=0;
		v.weighty=0;
		v.weightx=0;
		panelRight.add(btnDelete, v);
		v.gridy=2;
		v.gridx=0;
		v.weightx=0;
		v.weighty=0;
		panelRight.add(btnExit, v);
		panel.add(panelLeft, BorderLayout.WEST);
		listHeader = new JLabel("<html><span style='font-size:2em;'>Tables</span></html>");
		listHeader.setOpaque(true);
		listHeader.setForeground(Color.WHITE);
		listHeader.setBackground(someBlue);
		listHeader.setBorder(new EmptyBorder(10,10,0,0));
		listHeader.setHorizontalTextPosition(JLabel.CENTER);
		c.gridy=0;
		c.gridx=0;
		c.weighty=0;
		c.weightx=1;
		c.fill=GridBagConstraints.NONE;
		c.anchor = GridBagConstraints.CENTER;
		panelLeft.add(listHeader, c);
		c.gridy=1;
		c.gridx=0;
		c.weighty=1;
		c.weightx=1;
		c.fill=GridBagConstraints.BOTH;
		c.anchor = GridBagConstraints.LINE_START;
		panelLeft.add(tablesListScrollPane, c);
		c.weightx=1;
		c.weighty=0;
		c.gridy=2;
		panelLeft.add(btnOpen, c);
		btnOpen.setBorder(new EmptyBorder(10,40,10,40));
		panelLeft.setBorder(new EmptyBorder(0,10,10,10));
		panelLeft.setBackground(someBlue);
		panel.add(scrollTable, BorderLayout.CENTER);
		selectedTable = (String) listOfTablesNames.getSelectedValue();
		rs = dbOps.executeQuery("SELECT * FROM " + selectedTable);
		loadData(rs);
		tableModel.addTableModelListener(this);
	}

	private class dblClick implements MouseListener{

		@Override
		public void mouseClicked(MouseEvent arg0) {
			if(arg0.getClickCount()==2){
				if(checkConnection()){
					selectedTable = (String) listOfTablesNames.getSelectedValue();
					//rs = st.executeQuery("SELECT * FROM " + selectedTable);
					rs = dbOps.executeQuery("SELECT * FROM " + selectedTable);
					loadData(rs);
				}	
	        }
		}

		@Override
		public void mouseEntered(MouseEvent arg0) {

			
		}

		@Override
		public void mouseExited(MouseEvent arg0) {

			
		}

		@Override
		public void mousePressed(MouseEvent arg0) {

			
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {

			
		}
		
	}
	
	/**
	 * The Class listenExitButton implements a listener for the Exit button, if the button is clicked
	 * the application will be terminated.
	 */
	private class listenExitButton implements ActionListener {

		/* (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent arg0) {
			System.exit(0);
		}
	}

	/**
	 * The Class listenAddButton implements a listener for the Add button which is set to add a new empty
	 * record to the current open table.
	 */
	private class listenAddButton implements ActionListener {

		/* (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent arg0){
			if(checkConnection()){
				int nrCols = table.getColumnCount();
				Vector<String> row = new Vector<String>();
				for(int i=1; i<= nrCols; i++){
					row.add("");
				}
				DefaultTableModel model = (DefaultTableModel)table.getModel();
				model.addRow(row);
			} 
		}
	}
	private class listenOpenButton implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e) {
			
			if(checkConnection()){
				selectedTable = (String) listOfTablesNames.getSelectedValue();
				String sqlString = "SELECT * FROM " + selectedTable;
				ResultSet tdrs = dbOps.executeQuery(sqlString);
				loadData(tdrs);
			}	
		}
	}
	/**
	 * The Class listenRemoveButton is used to implement a listener for the Delete button. The changes occurs at the table model level.
	 */
	private class listenRemoveButton implements ActionListener{

		/* (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		@Override
		public void actionPerformed(ActionEvent arg0){
			if(checkConnection()){
				DefaultTableModel model = (DefaultTableModel)table.getModel();
				int row = table.getSelectedRow();
				if(row<0){
					JOptionPane.showMessageDialog(frame,"No row is selected!", "Row not selected", JOptionPane.ERROR_MESSAGE);
				} else {
					String cellValue4 = String.valueOf( table.getValueAt(row, 0) );
					int id = Integer.parseInt(cellValue4);
					String selectedTable2 = (String) listOfTablesNames.getSelectedValue();
					boolean deleted = dbOps.deleteRecord(selectedTable2, id);
					if(deleted) model.removeRow(row);
				}
			} 
		}
	}

	/**
	 * This method is called the first time when the panel is created and everytime there is new data to populate the table with.
	 *
	 * @param rss the result set containing the data that will populate the table
	 */
	private void loadData(ResultSet rss){

		tableModel.setDataVector(dbOps.loadTableData(rss), dbOps.loadColumnNames(rss));
	}

	/* (non-Javadoc)
	 * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)
	 */
	/**
	 * 
	 */
	@Override
	public void tableChanged(TableModelEvent e) {
		checkConnection();
		int row = e.getFirstRow();
		int column = e.getColumn();
		int type = e.getType();
		/*If the change is an add operation, the id of the latest record
		is being looked up in order to automatically handle the
		incrementation of the id which is in most cases the primary key
		of the table.
		Currently doesn' handle the case where the first column is not the primary key(id)
		*/
		if(type==1){
			try {
				newRow.addNewColumn(selectedTable, username, password, database, host);
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			String selectedTable5 = (String) listOfTablesNames.getSelectedValue();
			rs = dbOps.executeQuery("SELECT * FROM " + selectedTable5);
			loadData(rs);
		} else if(type==0){
			if(row>=0 && column>=0){
				String selectedTable2 = (String) listOfTablesNames.getSelectedValue();
				String cellValue = String.valueOf(table.getValueAt(row, column));
				String namec = table.getColumnName(column);
				String cellValue3 = String.valueOf(table.getValueAt(row, 0));
				int id = Integer.parseInt(cellValue3);
				String query = "UPDATE " + selectedTable2 + " SET " + namec + "=" + "?" + " WHERE id='" + id + "'";
				dbOps.executePreparedStatement(query, cellValue);
			}
		}
	}
}
